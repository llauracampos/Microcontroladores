;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                    MARÇO DE 2021                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSÃO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRIÇÃO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DADO1		
		DADO	    ;ARMAZENA O DADO PARA A EEPROM
		DADO_TEMP
		ENDERECO
		ENDERECO_ANTERIOR
		ENDERECO_ANTERIOR_TESTE2
		ENDERECO_TEMPORARIO
		CONTADOR_TEMPORARIO
		ENDERECO_FINAL
		POSICAO
		CONTADOR
		TESTE1
		TESTE2

		;NOVAS VARIÁVEIS

	ENDC			;FIM DO BLOCO DE MEMÓRIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA
; INICIALIZAÇÃO DA EEPROM, DE ACORDO COM A DESCRIÇÃO NO ARQUIVO "Def_Rega_Formigas.inc"

;A PARTIR DO ENDEREÇO ZERO DA EEPROM, DADOS EM ORDEM ALEATÓRIA
	ORG 0x2100
	DE	0X89,0X1E,0X39,0X9F,0XC2,0X0C,0XAB,0X33,0X63,0XD3,0X95,0X7B,0X38,0XD6,0X1E,0X48
	DE	0XDB,0XD8,0X77,0XFD,0XA5,0XFC,0X0C,0XBE,0X68,0X9B,0XD9,0X10,0XD8,0XEC,0X90,0X91
	DE	0XAA,0XBB,0XCC,0XDD,0XEE,0XF1,0XC9,0X20

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÃO ESCRITAS AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
LE_EEPROM
;LER DADO DA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;O DADO LIDO RETORNA EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR		;INDICA O END. DE LEITURA
	BSF		EECON1,RD	;INICIA O PROCESSO DE LEITURA
	MOVF	EEDATA,W	;COLOCA DADO LIDO EM W
	BANK0				;POSICIONA PARA BANK 0
	RETURN

GRAVA_EEPROM
;ESCREVE UM DADO NA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;O DADO A SER ESCRITO DEVE ESTAR ARMAZENADO NA VARIÁVEL DADO
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR
	MOVF	DADO,W
	MOVWF	EEDATA
	BSF		EECON1,WREN ;HABILITA ESCRITA
	BCF		INTCON,GIE	;DESLIGA INTERRUPÇÕES
	MOVLW	B'01010101'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	MOVLW	B'10101010'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	BSF		EECON1,WR ;INICIA A ESCRITA
AGUARDA
	BTFSC	EECON1,WR ;TERMINOU?
	GOTO	AGUARDA
	BSF		INTCON,GIE ;HABILITA INTERRUPÇÕES
	BANK0				;POSICIONA PARA BANK 0
	RETURN

SUBROTINA1

	;CORPO DA ROTINA

	RETURN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00000000' ;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SAÍDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000100'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN
	MOVLW	.0  ; PREENCHE AS VARIÁVEIS QUE VÃO COMEÇAR A PERCORRER O ENDEREÇO NA EEPROM COM 0.
	MOVWF	ENDERECO
	MOVWF	ENDERECO_ANTERIOR
	MOVLW	.39 ; DEFINE QUAL O ÚLTIMO ENDEREÇO QUE DEVE SER ORDENADO NA EEPROM.
	MOVWF	ENDERECO_FINAL
	MOVLW	B'00000000' 
	MOVWF	GPIO	; APAGA TODOS OS LEDS.
	BSF	GPIO, GP5   ; LIGA O GP5, INDICANDO QUE A ORDENAÇÃO VAI COMEÇAR.

LEITURA1
	MOVFW	ENDERECO    
	SUBWF	ENDERECO_FINAL, W   ; SUBTRAI O ENDEREÇO ATUAL DO ULTIMO ENDEREÇO DESEJADO PARA VERIFICAR SE AINDA É NECESSÁRIO REALIZAR A ORDENAÇÃO.
	BTFSS	STATUS, C   ; TESTA SE O ENDEREÇO AINDA É MENOR QUE O ÚLTIMO.
	GOTO	FINAL	; QUANDO CHEGAR AO ÚLTIMO ENDEREÇO, ENCAMINHA PARA A LABEL QUE DESLIGA O GP5.
	MOVFW	ENDERECO    ; MOVE O ENDEREÇO ATUAL PARA O WORK.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O DADO QUE ESTÁ ARMAZENADO NESSE ENDEREÇO.
	MOVWF	DADO1	; GUARDA O DADO PRESENTE NO PRIMEIRO ENDEREÇO.
	INCF	ENDERECO    ; SOMA 1 PARA QUE SEJA OBSERVADO O ENDEREÇO SEGUINTE.
	MOVFW	ENDERECO    ; COLOCA ESSE NOVO ENDEREÇO NO WORK;
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O DADO QUE ESTÁ ARMAZENADO NESSE ENDEREÇO.
	SUBWF	DADO1, W    ; COMPARA O DADO ARMAZENADO NO PRIMEIRO ENDEREÇO VERIFICADO COM O SEGUNDO.
	BTFSC	STATUS, C
	GOTO	INVERTE	; SE O DADO PRESENTE NO SEGUNDO ENDEREÇO VERIFICADO FOR MENOR QUE O DADO PRESENTE NO PRIMEIRO ENDEREÇO VERIFICADO, É ENCAMINHADO PARA LABEL DE INVERSÃO.
	INCF	ENDERECO_ANTERIOR ; CASO ESTES DOIS JÁ ESTEJAM ORDENADOS, É INCREMENTADA A VARIÁVEL UTILIZADA NA INVBERSÃO.
	GOTO	LEITURA1    ; O PROGRAMA RETORNA PARA A LABEL PARA COMPARAR O ENDEREÇO ATUAL (QUE AGORA É ENDEREÇO + 1) COM O PRÓXIMO.

INVERTE
	MOVFW	ENDERECO_ANTERIOR   ; ESSA VARIÁVEL GUARDA O VALOR DO ENDEREÇO ORIGINAL QUE ESTÁ SENDO VERIFICADO, JÁ QUE NA LABEL DE LEITURA ELE É INCREMENTADO PARA OLHAR O PRÓXIMO ENDEREÇO.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O DADO QUE ESTÁ ARMAZENADO NESSE ENDEREÇO INICIAL.
	MOVWF	DADO_TEMP   ; GUARDA ESSE DADO EM UMA VARIÁVEL TEMPORÁRIA.
	MOVFW	ENDERECO    ; MOVE O ENDEREÇO SEGUINTE PARA O WORK (QUE FOI INCREMENTADO NA LABEL DE LEITURA).
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O DADO QUE ESTÁ ARMAZENADO NO SEGUNDO ENDEREÇO ENDEREÇO.
	MOVWF	DADO	; COLOCA NA VARIÁVEL DADO.
	MOVFW	ENDERECO_ANTERIOR   ; MOVE O ENDEREÇO INICIAL PARA O WORK, PARA QUE OCORRA A PRIMEIRA INVERSÃO NA EEPROM.
	CALL	GRAVA_EEPROM	; GRAVA NO PRIMEIRO ENDEREÇO O DADO CONTIDO NO SEGUNDO ENDEREÇO.
	MOVFW	DADO_TEMP   
	MOVWF	DADO	; MOVE O DADO DO PRIMEIRO ENDEREÇO, QUE ESTAVA ARMAZENADO NA VARIÁVEL TEMPORÁRIA, NA VARIÁVEL DADO.
	MOVFW	ENDERECO   ; MOVE O SEGUNDO ENDEREÇO PARA O WORK, PARA QUE OCORRA A SEGUNDA INVERSÃO NA EEPROM.
	CALL	GRAVA_EEPROM	; GRAVA NO SEGUNDO ENDEREÇO O DADO CONTIDO NO PRIMEIRO ENDEREÇO.
	INCF	ENDERECO_ANTERIOR   ; INCREMENTA A VARIÁVEL DE ENDEREÇO ANTERIOR, PARA QUE NA P´ROXIMA INVERSÃO ELA ESTEJA NA POSIÇÃO CORRETA. (CASO NÃO HAJA INVERSÃO ELA É INCREMENTADA NA FUNÇÃO DE LEITURA).
	MOVLW	.1  
	MOVWF	TESTE1	
	MOVFW	ENDERECO
	SUBWF	TESTE1, W   ; TESTA SE AINDA ESTAMOS VERIFICANDO O PRIMEIRO ENDEREÇO.
	BTFSC	STATUS, C
	GOTO	LEITURA1   ; CASO ESTAJAMOS NO PRIMEIRO ENDEREÇO, NÃO É NECESSÁRIO REALIZAR OUTRAS VERIFICAÇÕES, ENTÃO O PROGRAMA PODE FAZER A LEITURA DO PRÓXIMO ENDEREÇO.
	GOTO	PRE_LEITURA2	; CASO SEJA UM ENDEREÇO MAIOR QUE O PRIMEIRO, É NECESSÁRIO VERIFICAR SE O DADO CONTIDO NELE É MENOR QUE TODOS OS ANTERIORES.

PRE_LEITURA2
	MOVFW	ENDERECO_ANTERIOR   
	MOVWF	ENDERECO_TEMPORARIO ; GUARDA A VARIÁVEL DE ENDEREÇO ANTERIOR EM UMA VARIÁVEL TEMPORÁRIA, POIS ELE SERÁ MANIPULADO AO LONGO DA SEGUNDA LABEL DE LEITURA.
	DECF	ENDERECO_ANTERIOR   ; DECREMENTA O ENDEREÇO ANTERIOR (QUE FOI INCREMENTADO NO FIM DA LABEL DE INVERSÃO), PARA INDICAR QUE ESTAMOS NA POSIÇÃO ANTERIOR A VERIFICADA, VISTO QUE O DADO FOI INVERTIDO.

LEITURA2
	MOVFW	ENDERECO_ANTERIOR   ; MOVE O NOVO ENDEREÇO DO DADO PARA O WORK.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O QUE ESTÁ CONTIDO NESSE ENDEREÇO.
	MOVWF	DADO1	; GUARDA ESSE VALOR EM DADO1.
	DECF	ENDERECO_ANTERIOR   ; DECREMENTA A VARIÁVEL DO ENDEREÇO ATUAL, PARA VERIFICAR SE O DADO É MENOR QUE O PRESENTE NA POSIÇÃO ANTERIOR.
	MOVFW	ENDERECO_ANTERIOR   ; MOVE O ENDEREÇO DA POSIÇÃO ANTERIOR PARA O WORK.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O QUE ESTÁ CONTIDO NESSE ENDEREÇO.
	MOVWF	DADO	; ARMAZENA NA VARIÁVEL DADO.
	MOVFW	DADO1	
	SUBWF	DADO, W	
	BTFSC	STATUS, C   ; VERIFICA SE O VALOR CONTIDO NO ENDEREÇO ATUAL É MENOR DO QUE O VALOR CONTIDO NO ENDEREÇO ANTERIOR.
	GOTO	INVERTE2    ; CASO SEJA MENOR, ESSE VALOR SERÁ INVERTIDO.
	MOVFW	ENDERECO_TEMPORARIO ; CASO NÃO SEJA MENOR, O ENDEREÇO GUARDADO NA VARIÁVEL TEMPORÁRIA JÁ PODE SER DEVOLVIDO PARA A VARIÁVEL ORIGINAL.
	MOVWF	ENDERECO_ANTERIOR
	GOTO	LEITURA1    ; O PROGRAMA PODE REALIZAR A LEITURA E COMPARAÇÃO DA PRÓXIMA POSIÇÃO.
	
INVERTE2
	MOVFW	ENDERECO_ANTERIOR
	MOVWF	ENDERECO_ANTERIOR_TESTE2    ; COPIA O VALOR DO ENDEREÇO PARA UMA NOVA VARIÁVEL (COMO ELE FOI DECREMENTADO NA LABEL DE LEITURA, ELE ESTÁ APONTANDO PARA O ENDEREÇO ANTERIOR AO DO DADO QUE ESTÁ SENDO VERIFICADO).
	MOVFW	ENDERECO_ANTERIOR_TESTE2    ; COLOCA ESSE VALOR NO WORK, PARA SER VERIFICADO NA EEMPROM.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O QUE ESTÁ CONTIDO NESSE ENDEREÇO.
	MOVWF	DADO_TEMP   ; GUARDA ESSE DADO EM UMA VARIÁVEL TEMPORÁRIA.
	INCF	ENDERECO_ANTERIOR   ; INCREMENTA A VARIÁVEL (QUE FOI DECREMENTADA NA LABEL DE LEITURA2), PARA QUE ELA APONTE PARA A POSIÇÃO DO DADO QUE ESTÁ SENDO VERIFICADO.
	MOVFW	ENDERECO_ANTERIOR   ; COLOCA ESSE VALOR NO WORK, PARA SER VERIFICADO NA EEMPROM.
	CALL	LE_EEPROM   ; BUSCA NA EEPROM O QUE ESTÁ CONTIDO NESSE ENDEREÇO.
	MOVWF	DADO	; COLOCA O VALOR NA VARIÁVEL DADO.
	MOVFW	ENDERECO_ANTERIOR_TESTE2    ; MOVE O ENDEREÇO ANTERIOR PARA O WORK.
	CALL	GRAVA_EEPROM	; GRAVA NO ENDEREÇO ANTERIOR O DADO CONTIDO NO ENDEREÇO ATUAL.
	MOVFW	DADO_TEMP  
	MOVWF	DADO	; MOVE O VALOR QUE ESTÁVA CONTIDO NO DADO TEMPORÁRIO PARA A VARIÁVEL DADO.
	MOVFW	ENDERECO_ANTERIOR ; MOVE O ENDEREÇO ATUAL PARA O WORK.
	CALL	GRAVA_EEPROM	; GRAVA NO ENDEREÇO ATUAL O DADO CONTIDO NO ENDEREÇO ANTERIOR, FINALIZANO A INVERSÃO.
	DECF	ENDERECO_ANTERIOR   ; DECREMENTA A VARIÁVEL QUE GUARDA O VALOR DO ENDEREÇO ATUAL, JÁ QUE O VALOR FOI INVERTIDO E ESTÁ EM UM ENDEREÇO A MENOS, PARA QUE LIDO NOVAMENTE EM SUA NOVA POSIÇÃO.
	BTFSS	STATUS, Z   ; TESTA SE O ENDEREÇO ATUAL JÁ CHEGOU A 0.
	GOTO	LEITURA2    ; CASO NÃO TENHA CHEGADO, O PROGRAMA SERÁ ENCAMINHADO NOVAMENTE PARA A LABEL DE LEITURA DOIS, ATÉ QUE O DADO ANALISADO SEJA COMPARADO COM TODOS OS ANTERIORES.
	MOVFW	ENDERECO_TEMPORARIO 
	MOVWF	ENDERECO_ANTERIOR   ; CASO JÁ TENHA CHEGADO A 0, O ENDEREÇO GUARDADO NA VARIÁVEL TEMPORÁRIA É DEVOLVIDO A VARIÁVEL DE ENDEREÇO ANTERIOR.
	GOTO	LEITURA1    ; O PROGRAMA SERÁ ENCAMINHADO PARA A LABEL DE LEITURA1, PARA COMPARAR NOVOS VALORES.
	
FINAL
	BCF	GPIO, GP5   ; DESLIGA O GP5, INDICANDO QUE A ORDENAÇÃO TERMINOU.
	
FIM
	GOTO FIM

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
